@page "/settings"
@using EnigmaModel
@using System.ComponentModel.DataAnnotations
@inject IEnigmaService enigmaService
@rendermode InteractiveAuto


<PageTitle>Engima Encryption</PageTitle>


<h1 class="text-center fw-bold text-light">Settings</h1>
<h2 class="text-light fw-bold">Rotars:</h2>
<p class="text-light fw-bold">RotarI: EKMFLGDQVZNTOWYHXUSPAIBRCJ </p>
<p class="text-light fw-bold">RotarII: AJDKSIRUXBLHWTMCQGZNPYFVOE</p>
<p class="text-light fw-bold">RotarIII: BDFHJLCPRTXVZNYEIWGAKMUSQO</p>
<p class="text-light fw-bold">RotarIV: ESOVPZJAYQUIRHXLNFTGKDCMWB</p>
<p class="text-light fw-bold">RotarV: VZBRGITYUPSDNHLXAWMJQOFECK</p>

<h2 class="fw-bold text-light">Options:</h2>


<div class="pb-5">
    <p class="text-light fw-bold">Selected Rotars:</p>
    <div class="bg-secondary rounded p-2" style="width:400px">
        <div class="d-flex">
            <p class="pe-4 fw-bold">First Rotar: </p>
            <InputSelect class="form-select" style="width:200px" TValue="int" Value="rotar1" ValueChanged="selectedvalue => HandleRotarChange(selectedvalue, 0)" ValueExpression="@(()=>rotar1)">
                <option value="0">RotarI</option>
                <option value="1">RotarII</option>
                <option value="2">RotarIII</option>
                <option value="3">RotarIV</option>
                <option value="4">RotarV</option>
            </InputSelect>
        </div>
        <div class="d-flex mt-2">
            <p class="fw-bold pe-4">Starting position: </p>
            <InputSelect class="form-select" style="width:200px" TValue="int" Value="rotar1Position" ValueChanged="selectedvalue => HandleRotarPositionChange(selectedvalue,0)" ValueExpression="@(()=>rotar1Position)">
                @for (int i = 0; i <26; i++)
                {
                    <option value="@i">@Alphabet[i]</option>
                }
            </InputSelect>
        </div>
        <div class="d-flex mt-2">
            <p class="fw-bold pe-4">Notch position: </p>
            <InputSelect class="form-select" style="width:200px" TValue="int" Value="rotar1Notch" ValueChanged="selectedvalue=>HandleRotarNotchChange(selectedvalue,0)" ValueExpression="@(()=>rotar1Notch)">
                @for (int i = 0; i < 26; i++)
                {
                    <option value="@i">@Alphabet[i]</option>
                }
            </InputSelect>
        </div>
    </div>
     <div class="bg-secondary rounded p-2 mt-4" style="width:400px">
        <div class="d-flex">
            <p class="pe-4 fw-bold">Second Rotar: </p>
            <InputSelect class="form-select" style="width:200px" TValue="int" Value="rotar2" ValueChanged="selectedvalue => HandleRotarChange(selectedvalue, 1)" ValueExpression="@(()=>rotar2)">
                <option value="0">RotarI</option>
                <option value="1" selected>RotarII</option>
                <option value="2">RotarIII</option>
                <option value="3">RotarIV</option>
                <option value="4">RotarV</option>
            </InputSelect>
        </div>
        <div class="d-flex mt-2">
            <p class="fw-bold pe-4">Starting position: </p>
            <InputSelect class="form-select" style="width:200px" TValue="int" Value="rotar2Position" ValueChanged="selectedvalue => HandleRotarPositionChange(selectedvalue,1)" ValueExpression="@(()=>rotar2Position)">
                @for (int i = 0; i < 26; i++)
                {
                    <option value="@i">@Alphabet[i]</option>
                }
            </InputSelect>
        </div>
        <div class="d-flex mt-2">
            <p class="fw-bold pe-4">Notch position: </p>
            <InputSelect class="form-select" style="width:200px" TValue="int" Value="rotar2Notch" ValueChanged="selectedvalue=>HandleRotarNotchChange(selectedvalue,1)" ValueExpression="@(()=>rotar2Notch)">
                @for (int i = 0; i < 26; i++)
                {
                    <option value="@i">@Alphabet[i]</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="bg-secondary rounded p-2 mt-4" style="width:400px">
        <div class="d-flex">
            <p class="pe-4 fw-bold">Third Rotar: </p>
            <InputSelect class="form-select" style="width:200px" TValue="int" Value="rotar3" ValueChanged="selectedvalue => HandleRotarChange(selectedvalue, 2)" ValueExpression="@(()=>rotar3)">
                <option value="0">RotarI</option>
                <option value="1">RotarII</option>
                <option value="2" selected>RotarIII</option>
                <option value="3">RotarIV</option>
                <option value="4">RotarV</option>
            </InputSelect>
        </div>
        <div class="d-flex mt-2">
            <p class="fw-bold pe-4">Starting position: </p>
            <InputSelect class="form-select" style="width:200px" TValue="int" Value="rotar3Position" ValueChanged="selectedvalue => HandleRotarPositionChange(selectedvalue,2)" ValueExpression="@(()=>rotar3Position)">
                @for (int i = 0; i < 26; i++)
                {
                    <option value="@i">@Alphabet[i]</option>
                }
            </InputSelect>
        </div>
        <div class="d-flex mt-2">
            <p class="fw-bold pe-4">Notch position: </p>
            <InputSelect class="form-select" style="width:200px" TValue="int" Value="rotar3Notch" ValueChanged="selectedvalue=>HandleRotarNotchChange(selectedvalue,2)" ValueExpression="@(()=>rotar3Notch)">
                @for (int i = 0; i < 26; i++)
                {
                    <option value="@i">@Alphabet[i]</option>
                }
            </InputSelect>
        </div>
    </div> 
    <div class="mt-5">
        <p class="text-light fw-bold">Reflectors:</p>
        <p class="text-light fw-bold">ReflectorA: EJMZALYXVBWFCRQUONTSPIKHGD </p>
        <p class="text-light fw-bold">ReflectorB: YRUHQSLDPXNGOKMIEBFZCWVJAT </p>
        <p class="text-light fw-bold">ReflectorC: FVPJIAOYEDRZXWGCTKUQSBNMHL </p>
        <InputSelect class="form-select" style="width:200px" TValue="int" Value="reflector" ValueChanged="selectedvalue => HandleReflectorChange(selectedvalue)" ValueExpression="@(()=>reflector)">
            <option value="0" selected>ReflectorA</option>
            <option value="1">ReflectorB</option>
            <option value="2">ReflectorC</option>
        </InputSelect>
    </div>
    <div class="mt-5">
        <p class="text-light fw-bold">Plugboard:</p>
        <p class="text-light fw-bold mt-2">Add a plug:</p>
        <div class="d-flex">
            <InputText class="form-control" style="width:100px" @bind-Value="plug1" placeholder="A"/>
            <InputText class="form-control" style="width:100px" @bind-Value="plug2" placeholder="B" />
            <button class="btn btn-primary" @onclick="()=>HandlePlugChange(plug1,plug2)">Add</button>
        </div>
        <p class="text-danger">@plugError</p>
        <p class="text-light fw-bold mt-2">Current plugs:</p>
        @if(enigmaService.GetPlugs().Count == 0)
        {
            <p class="text-light">No plugs programmed</p>
        }
        else
        {
            foreach (var plug in enigmaService.GetPlugs())
            {
                <div class="row bg-secondary rounded mt-2" style="width:100px">
                    <p class="text-light fw-bold col-6 pt-2">@plug.Key  @plug.Value</p>
                    <button class="btn col-1" @onclick="()=>enigmaService.RemovePlug(plug.Key,plug.Value)"><i class="bi bi-x-circle-fill text-danger"></i></button>
                </div>
            }
        }
    </div>
</div>
@code {
    int rotar1;
    int rotar1Position;
    int rotar1Notch;

    int rotar2;
    int rotar2Position;
    int rotar2Notch;

    int rotar3;
    int rotar3Position;
    int rotar3Notch;

    string plug1 = "";
    string plug2 = ""; 
    string plugError = "";

    int reflector;
    char[] Alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
    protected override void OnInitialized()
    {
        rotar1 = enigmaService.GetSelectedRotar(0);
        rotar1Position = enigmaService.GetPosition(0);
        rotar1Notch = enigmaService.GetNotch(0);

        rotar2 = enigmaService.GetSelectedRotar(1);
        rotar2Position = enigmaService.GetPosition(1);
        rotar2Notch = enigmaService.GetNotch(1);

        rotar3 = enigmaService.GetSelectedRotar(2);
        rotar3Position = enigmaService.GetPosition(2);
        rotar3Notch = enigmaService.GetNotch(2);

        reflector = enigmaService.GetSelectedReflector();
    }


    private void HandleRotarChange(int selectedValue, int rotar)
    {
        enigmaService.SetRotar(rotar, selectedValue);
        if(rotar == 0)
        {
            rotar1 = selectedValue;
            rotar1Position = enigmaService.GetPosition(rotar);
            rotar1Notch = enigmaService.GetNotch(rotar);            
        }
        else if(rotar == 1)
        {
            rotar2 = selectedValue;
            rotar2Position = enigmaService.GetPosition(rotar);
            rotar2Notch = enigmaService.GetNotch(rotar);
        }
        else if(rotar == 2)
        {
            rotar3 = selectedValue;
            rotar3Position = enigmaService.GetPosition(rotar);
            rotar3Notch = enigmaService.GetNotch(rotar);
        }
    }
    private void HandleRotarPositionChange(int selectedValue, int rotar)
    {
        enigmaService.SetPosition(rotar, selectedValue);
        if (rotar == 0)
        {
            rotar1Position = selectedValue;
        }
        else if (rotar == 1)
        {
            rotar2Position = selectedValue;
        }
        else if (rotar == 2)
        {
            rotar3Position = selectedValue;
        }
    }
    private void HandleRotarNotchChange(int selectedValue,int rotar)
    {
        enigmaService.SetNotch(rotar, selectedValue);
        if(rotar == 0)
        {
            rotar1Notch = selectedValue;
        }
        else if(rotar == 1)
        {
            rotar2Notch = selectedValue;
        }
        else if(rotar == 2)
        {
            rotar3Notch = selectedValue;
        }
    }
    private void HandlePlugChange(string plug1="", string plug2="")
    {
        if (String.IsNullOrEmpty(plug1) || String.IsNullOrEmpty(plug2))
        {
            plugError = "Both of the letters need to be inserted";
            return;
        }
        char plug1Char = plug1[0];
        char plug2Char = plug2[0];

        plug1Char = char.ToUpper(plug1Char);
        plug2Char = char.ToUpper(plug2Char);
        if(plug1Char == plug2Char)
        {
            plugError = "The letters can't be the same";
            return;
        }
        else if (!enigmaService.IsPlugged(plug1Char) && enigmaService.IsPlugged(plug2Char) || enigmaService.IsPlugged(plug1Char) && !enigmaService.IsPlugged(plug2Char))
        {
            plugError = "One of the letters is already plugged";
            return;
        }

        enigmaService.SetPlug(plug1Char, plug2Char);
        plugError = "";
        return;

    }
    private void HandleReflectorChange(int selectedValue)
    {
        enigmaService.SetSelectedReflector(selectedValue);
        reflector = selectedValue;
    }

}
